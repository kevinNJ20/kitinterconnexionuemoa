<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- ✅ FLOW 1: Réception Manifeste avec Supabase REST API -->
    <sub-flow name="receive-manifeste-from-pays-a" doc:id="2d49968b-9285-4fd1-8cb7-4b92f0d5db0e" >
        <set-variable value="#['KIT_' ++ now() as String {format: 'yyyyMMddHHmmss'} ++ '_' ++ (random() * 1000) as String {format: '000'}]" 
                      doc:name="Set Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set incoming" variableName="incoming"/>
        
        <logger level="INFO" message="📨 [Kit] Réception manifeste: #[vars.incoming.numeroManifeste] depuis Pays A" doc:name="Log Manifeste Reception" />
        
        <!-- ✅ Préparation données pour Supabase REST API -->
        <ee:transform doc:name="Transform for Supabase REST" doc:id="d97cf086-35e8-4f97-bdb9-acce899840db">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    numero_manifeste: vars.incoming.numeroManifeste,
    transporteur: vars.incoming.transporteur,
    port_embarquement: vars.incoming.portEmbarquement,
    port_debarquement: vars.incoming.portDebarquement,
    date_arrivee: vars.incoming.dateArrivee,
    pays_origine: "CIV",  // Côte d'Ivoire par défaut
    pays_destination: vars.incoming.marchandises[0].paysDestination,
    data_json: {
        numeroManifeste: vars.incoming.numeroManifeste,
        transporteur: vars.incoming.transporteur,
        marchandises: vars.incoming.marchandises,
        correlationId: vars.correlationId,
        dateReception: now()
    },
    date_reception: now(),
    statut: "RECU"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Insertion via Supabase REST API - UTILISE LES VARIABLES YAML -->
        <http:request method="POST" doc:name="Insert Manifeste via REST" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.manifestes}">
            <!-- Payload déjà préparé dans le transform précédent -->
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] Manifeste inséré via REST API: #[vars.incoming.numeroManifeste]" doc:name="Log Insert Success" />
        
        <flow-ref name="route-to-destination-country" doc:name="Route to Destination Country" />
        <flow-ref name="notify-commission-uemoa" doc:name="Notify Commission UEMOA" />
        
        <ee:transform doc:name="Success Response" doc:id="776c14a0-c4b9-4a9b-9b67-91ae0d5fefe6">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "SUCCESS",
    message: "Manifeste transmis avec succès via REST API",
    numeroManifeste: vars.incoming.numeroManifeste,
    correlationId: vars.correlationId,
    timestamp: now(),
    supabase: {
        endpoint: "${supabase.rest.base_path}${supabase.rest.endpoints.manifestes}",
        method: "POST"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <set-variable value="#[200]" doc:name="Set Success Status" variableName="http.status" />
    </sub-flow>

    <!-- FLOW 2: Routage vers Pays de Destination -->
    <sub-flow name="route-to-destination-country" doc:id="60d331bf-8b2e-4978-a138-586b50c1b673" >
        <logger level="INFO" message="🚀 [Kit] Routage vers pays destination: #[vars.incoming.marchandises[0].paysDestination]" doc:name="Log Routing" />
        
        <ee:transform doc:name="Transform for Destination System" doc:id="a577f706-7335-42b2-8e4c-5c5f5f5e9621">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    manifeste: {
        numeroOrigine: vars.incoming.numeroManifeste,
        transporteur: vars.incoming.transporteur,
        portOrigine: vars.incoming.portEmbarquement,
        portDestination: vars.incoming.portDebarquement,
        dateArrivee: vars.incoming.dateArrivee,
        paysOrigine: "CIV"
    },
    marchandises: vars.incoming.marchandises map ((item, index) -> {
        position: index + 1,
        codeTarifaire: item.codeSH,
        description: item.designation,
        poidsNet: item.poidsBrut,
        quantite: item.nombreColis,
        importateur: item.destinataire,
        valeurEstimee: 0
    })
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ UTILISE LES VARIABLES YAML pour l'endpoint -->
        <http:request method="POST" doc:name="Send to Destination Country" 
                      path="${systeme.paysB.endpoints.manifeste}" config-ref="paysBConfig">
            <http:headers><![CDATA[#[{
    "Content-Type": "application/json",
    "X-Source-Country": "CIV",
    "X-Source-System": "KIT_INTERCONNEXION", 
    "X-Correlation-ID": vars.correlationId
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] Manifeste envoyé avec succès vers pays destination" doc:name="Log Routing Success" />
    </sub-flow>

    <!-- FLOW 3: Notification Commission UEMOA -->
    <sub-flow name="notify-commission-uemoa" doc:id="79e9283d-2bf5-40be-a377-1609560747b9" >
        <async doc:name="Async Commission Notification">
            <logger level="INFO" message="📊 [Kit] Notification Commission UEMOA pour: #[vars.incoming.numeroManifeste]" doc:name="Log Commission Notification" />
            
            <ee:transform doc:name="Transform for Commission" doc:id="f4c46e4e-0124-4449-8249-7ce2971850c6">
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    typeOperation: "TRANSMISSION_MANIFESTE",
    numeroOperation: vars.incoming.numeroManifeste ++ "-" ++ now() as String {format: "yyyyMMddHHmmss"},
    paysOrigine: "CIV",
    paysDestination: vars.incoming.marchandises[0].paysDestination,
    donneesMetier: {
        numeroManifeste: vars.incoming.numeroManifeste,
        transporteur: vars.incoming.transporteur,
        nombreMarchandises: sizeOf(vars.incoming.marchandises),
        valeurTotaleEstimee: sum(vars.incoming.marchandises.poidsBrut) * 100
    },
    horodatage: now(),
    source: "KIT_INTERCONNEXION"
}]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            
            <!-- ✅ UTILISE LES VARIABLES YAML pour l'endpoint -->
            <http:request method="POST" doc:name="Send to Commission" 
                          path="${commission.uemoa.endpoints.tracabilite}" config-ref="commissionConfig">
                <http:headers><![CDATA[#[{
    "Authorization": "Bearer ${commission.uemoa.auth.token}",
    "Content-Type": "application/json",
    "X-Source-System": "KIT_INTERCONNEXION",
    "X-Correlation-ID": vars.correlationId
}]]]></http:headers>
            </http:request>
            
            <logger level="INFO" message="✅ [Kit] Commission UEMOA notifiée avec succès" doc:name="Log Commission Success" />
        </async>
    </sub-flow>

    <!-- ✅ FLOW 4: Réception Notification Paiement avec Supabase REST API -->
    <sub-flow name="receive-payment-notification" doc:id="c4f92f1f-e693-4d1f-b491-5ec49bd6c631" >
        <set-variable value="#['PAY_' ++ now() as String {format: 'yyyyMMddHHmmss'} ++ '_' ++ (random() * 1000) as String {format: '000'}]" 
                      doc:name="Set Payment Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set incoming" variableName="incoming" />
        
        <logger level="INFO" message="💳 [Kit] Réception notification paiement: #[vars.incoming.numeroDeclaration]" doc:name="Log Payment Reception" />
        
        <!-- ✅ Préparation données paiement pour Supabase REST API -->
        <ee:transform doc:name="Transform Payment for Supabase REST" doc:id="5f8a29cd-78b7-4d64-be65-f7add54dc955">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    numero_declaration: vars.incoming.numeroDeclaration,
    manifeste_origine: vars.incoming.manifesteOrigine,
    montant_paye: vars.incoming.montantPaye,
    reference_paiement: vars.incoming.referencePaiement,
    date_paiement: vars.incoming.datePaiement,
    pays_declarant: vars.incoming.paysDeclarant,
    mode_paiement: vars.incoming.modePaiement default "ELECTRONIQUE",
    date_reception: now(),
    statut: "PAIEMENT_CONFIRME"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Insertion paiement via Supabase REST API - UTILISE LES VARIABLES YAML -->
        <http:request method="POST" doc:name="Insert Payment via REST" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.paiements}">
            <!-- Payload déjà préparé dans le transform précédent -->
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] Paiement inséré via REST API: #[vars.incoming.numeroDeclaration]" doc:name="Log Payment Insert Success" />
        
        <flow-ref name="authorize-release-to-origin" doc:name="Authorize Release to Origin" />
        
        <ee:transform doc:name="Payment Confirmation Response" doc:id="ded9588c-7a9f-481e-9dea-7d0e21115ec3">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "SUCCESS",
    message: "Paiement confirmé via REST API, mainlevée autorisée",
    numeroDeclaration: vars.incoming.numeroDeclaration,
    correlationId: vars.correlationId,
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- FLOW 5: Autorisation Mainlevée -->
    <sub-flow name="authorize-release-to-origin" doc:id="99dc5687-8aed-48f8-9b7f-6a836d7229db" >
        <logger level="INFO" message="🔓 [Kit] Autorisation mainlevée pour: #[vars.incoming.manifesteOrigine]" doc:name="Log Release Authorization" />
        
        <ee:transform doc:name="Transform Release Authorization" doc:id="c9d09bdc-9929-46c5-b1c6-15caf0bd2a89">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    autorisationMainlevee: {
        numeroManifeste: vars.incoming.manifesteOrigine,
        numeroDeclaration: vars.incoming.numeroDeclaration,
        montantAcquitte: vars.incoming.montantPaye,
        paysDeclarant: vars.incoming.paysDeclarant,
        dateAutorisation: now(),
        referenceAutorisation: "AUTH-" ++ vars.incoming.numeroDeclaration ++ "-" ++ (now() as String {format: "yyyyMMddHHmmss"}),
        statut: "AUTORISE"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ UTILISE LES VARIABLES YAML pour l'endpoint -->
        <http:request method="POST" doc:name="Send Release Authorization" 
                      path="${systeme.paysA.endpoints.mainlevee}" config-ref="paysAConfig">
            <http:headers><![CDATA[#[{
    "X-Correlation-ID": vars.correlationId,
    "Content-Type": "application/json",
    "X-Authorization-Source": "KIT_INTERCONNEXION"
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] Autorisation mainlevée envoyée avec succès" doc:name="Log Release Success" />
    </sub-flow>

    <!-- ✅ FLOW 6: Traçabilité Commission UEMOA avec Supabase REST API -->
    <sub-flow name="record-commission-trace" doc:id="3e222122-abe0-40b5-9747-b75c6bdeb887">
        <set-variable value="#[payload]" doc:name="Set incoming" variableName="incoming" />
        
        <logger level="INFO" message="📊 [Kit] Réception traçabilité Commission UEMOA: #[vars.incoming.numeroOperation]" doc:name="Log Commission Trace" />
        
        <!-- ✅ Préparation traçabilité pour Supabase REST API -->
        <ee:transform doc:name="Transform Trace for Supabase REST" doc:id="5649f41e-c01b-4138-bf36-f2ff037048b3">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    type_operation: vars.incoming.typeOperation,
    pays_source: vars.incoming.paysOrigine,
    pays_destination: vars.incoming.paysDestination,
    reference_operation: vars.incoming.numeroOperation,
    payload_entrant: vars.incoming,
    statut_traitement: "ENREGISTRE",
    date_debut: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Insertion traçabilité via Supabase REST API - UTILISE LES VARIABLES YAML -->
        <http:request method="POST" doc:name="Insert Trace via REST" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.tracabilite}">
            <!-- Payload déjà préparé dans le transform précédent -->
        </http:request>
        
        <ee:transform doc:name="Commission Trace Response" doc:id="48a9fcf9-8e02-4bc4-a445-fdc5461805b5">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "RECORDED",
    message: "Opération de traçabilité enregistrée avec succès via REST API",
    numeroOperation: vars.incoming.numeroOperation,
    typeOperation: vars.incoming.typeOperation,
    timestamp: now(),
    commission: {
        statut: "ACQUITTE",
        horodatage: now()
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <set-variable value="#[200]" doc:name="Set Success Status" variableName="http.status" />
        
        <logger level="INFO" message="✅ [Kit] Traçabilité Commission enregistrée via REST API" doc:name="Log Trace Success" />
    </sub-flow>

    <!-- ✅ FLOW 7: Health Check avec test Supabase REST API -->
    <sub-flow name="health-check" doc:id="2052aa94-0642-4a57-866e-64e9298c124d" >
        <!-- Test de connectivité Supabase -->
        <try doc:name="Test Supabase Connection">
            <!-- ✅ UTILISE LES VARIABLES YAML pour tester la connectivité -->
            <http:request method="GET" doc:name="Test Supabase REST" config-ref="supabaseRestConfig" 
                          path="${supabase.rest.base_path}${supabase.rest.endpoints.configurations}?limit=1">
                <!-- Simple requête pour tester la connectivité -->
            </http:request>
            <set-variable value="UP" doc:name="Set Supabase Status UP" variableName="supabaseStatus" />
            <error-handler>
                <on-error-continue>
                    <set-variable value="DOWN" doc:name="Set Supabase Status DOWN" variableName="supabaseStatus" />
                </on-error-continue>
            </error-handler>
        </try>
		<ee:transform doc:name="Health Status Response" doc:id="69f860ec-1e73-4ad2-b4ee-767eb63b0388">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    service: "Kit Interconnexion UEMOA",
    status: "UP",
    version: "1.0.0-REST",
    timestamp: now(),
    database: {
        "type": "Supabase REST API",
        status: vars.supabaseStatus default "UNKNOWN",
        endpoint: Mule::p('supabase.rest.base_url'),
        host: Mule::p('supabase.host')
    },
    endpoints: {
        manifesteTransmission: "/api/v1/manifeste/transmission",
        paiementNotification: "/api/v1/paiement/notification",
        tracabiliteEnregistrer: "/api/v1/tracabilite/enregistrer",
        healthCheck: "/api/v1/health",
        console: "/console"
    },
    configuration: {
        approach: "REST_API",
        timeout: Mule::p('external.timeout.connection') ++ " ms",
        retryAttempts: Mule::p('retry.attempts'),
        corsEnabled: Mule::p('cors.enabled')
    },
    externalSystems: {
        supabase: {
            host: Mule::p('supabase.host'),
            status: vars.supabaseStatus default "UNKNOWN",
            method: "REST_API",
            endpoints: {
                manifestes: Mule::p('supabase.rest.endpoints.manifestes'),
                paiements: Mule::p('supabase.rest.endpoints.paiements'),
                tracabilite: Mule::p('supabase.rest.endpoints.tracabilite')
            }
        },
        paysA: {
            host: Mule::p('systeme.paysA.host'),
            status: "MONITORED"
        },
        paysB: {
            host: Mule::p('systeme.paysB.host'),
            status: "MONITORED"
        },
        commission: {
            host: Mule::p('commission.uemoa.host'),
            status: "MONITORED"
        }
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" message="🏥 [Kit] Health check effectué - Supabase: #[vars.supabaseStatus]" doc:name="Log Health Check" />
    </sub-flow>

</mule>