# Configuration Properties (mule-app.properties)
# ================================================

# Configuration HTTP
http.port=8080
http.host=0.0.0.0

# Configuration Systèmes Externes
systeme.pays.a.host=localhost
systeme.pays.a.port=8081
systeme.pays.b.host=localhost
systeme.pays.b.port=8082
commission.uemoa.host=localhost
commission.uemoa.port=8083

# Configuration Base de Données Kit
db.driver=org.h2.Driver
db.url=jdbc:h2:mem:interconnexion;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:db/init.sql'
db.user=sa
db.password=

# Configuration Sécurité
api.key.commission=COMMISSION_SECRET_KEY
oauth.client.id=interconnexion_client
oauth.client.secret=interconnexion_secret

# Configuration Monitoring
monitoring.enabled=true
logging.level=INFO

---

# Script SQL d'initialisation (db/init.sql)
# ==========================================

-- Table des manifestes reçus
CREATE TABLE IF NOT EXISTS manifestes_recus (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    numero_manifeste VARCHAR(50) UNIQUE NOT NULL,
    transporteur VARCHAR(100),
    port_embarquement VARCHAR(50),
    port_debarquement VARCHAR(50),
    date_arrivee DATE,
    pays_destination VARCHAR(3),
    data_json CLOB,
    date_reception TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    statut VARCHAR(20) DEFAULT 'RECU'
);

-- Table des paiements reçus
CREATE TABLE IF NOT EXISTS paiements_recus (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    numero_declaration VARCHAR(50) NOT NULL,
    manifeste_origine VARCHAR(50),
    montant_paye DECIMAL(12,2),
    reference_paiement VARCHAR(100),
    date_paiement TIMESTAMP,
    pays_declarant VARCHAR(3),
    date_reception TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    statut VARCHAR(20) DEFAULT 'RECU'
);

-- Table des autorisations mainlevée
CREATE TABLE IF NOT EXISTS autorisations_mainlevee (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    numero_manifeste VARCHAR(50),
    numero_declaration VARCHAR(50),
    reference_autorisation VARCHAR(100) UNIQUE,
    montant_acquitte DECIMAL(12,2),
    pays_declarant VARCHAR(3),
    date_autorisation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    statut VARCHAR(20) DEFAULT 'AUTORISE'
);

-- Table de traçabilité des échanges
CREATE TABLE IF NOT EXISTS tracabilite_echanges (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    type_operation VARCHAR(50),
    pays_source VARCHAR(3),
    pays_destination VARCHAR(3),
    reference_operation VARCHAR(100),
    payload_entrant CLOB,
    payload_sortant CLOB,
    statut_traitement VARCHAR(20),
    date_traitement TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    duree_traitement_ms BIGINT
);

-- Insertion de données de test
INSERT INTO manifestes_recus (numero_manifeste, transporteur, port_embarquement, port_debarquement, date_arrivee, pays_destination, data_json, statut) VALUES
('MAN2025001', 'MAERSK LINE', 'ROTTERDAM', 'ABIDJAN', '2025-01-15', 'BFA', '{"test": true}', 'RECU'),
('MAN2025002', 'CMA CGM', 'HAMBURG', 'DAKAR', '2025-01-16', 'MLI', '{"test": true}', 'RECU');

---

# Configuration RAML API (api.raml)
# ==================================

#%RAML 1.0
title: Kit d'Interconnexion UEMOA - API
version: v1
baseUri: http://localhost:8080/api/v1
mediaType: application/json

documentation:
  - title: Kit d'Interconnexion des Systèmes Douaniers UEMOA
    content: |
      Cette API permet l'interconnexion des systèmes informatiques douaniers 
      des États membres de l'UEMOA dans le cadre de la mise en œuvre du régime 
      de la libre pratique.

types:
  Manifeste:
    type: object
    properties:
      numeroManifeste: string
      transporteur: string
      portEmbarquement: string
      portDebarquement: string
      dateArrivee: date-only
      marchandises: Marchandise[]
  
  Marchandise:
    type: object
    properties:
      codeSH: string
      designation: string
      poidsBrut: number
      nombreColis: integer
      destinataire: string
      paysDestination: string
  
  NotificationPaiement:
    type: object
    properties:
      numeroDeclaration: string
      manifesteOrigine: string
      montantPaye: number
      referencePaiement: string
      datePaiement: datetime
      paysDeclarant: string

/manifeste:
  /transmission:
    post:
      description: Réception d'un manifeste depuis un pays de prime abord
      body:
        application/json:
          type: Manifeste
          example: |
            {
              "numeroManifeste": "MAN2025001",
              "transporteur": "MAERSK LINE",
              "portEmbarquement": "ROTTERDAM",
              "portDebarquement": "ABIDJAN",
              "dateArrivee": "2025-01-15",
              "marchandises": [
                {
                  "codeSH": "8703.21.10",
                  "designation": "Véhicule particulier",
                  "poidsBrut": 1500.00,
                  "nombreColis": 1,
                  "destinataire": "IMPORT SARL",
                  "paysDestination": "BFA"
                }
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "status": "SUCCESS",
                  "message": "Manifeste transmis avec succès",
                  "numeroManifeste": "MAN2025001",
                  "timestamp": "2025-01-15T10:30:00Z"
                }

/paiement:
  /notification:
    post:
      description: Notification de paiement depuis un pays de destination
      body:
        application/json:
          type: NotificationPaiement
          example: |
            {
              "numeroDeclaration": "DEC2025001",
              "manifesteOrigine": "MAN2025001",
              "montantPaye": 250000.00,
              "referencePaiement": "PAY2025001",
              "datePaiement": "2025-01-15T14:30:00Z",
              "paysDeclarant": "BFA"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "status": "SUCCESS",
                  "message": "Paiement confirmé, mainlevée autorisée",
                  "numeroDeclaration": "DEC2025001",
                  "timestamp": "2025-01-15T14:35:00Z"
                }

/health:
  get:
    description: Vérification de l'état du service
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "service": "Kit Interconnexion UEMOA",
                "status": "UP",
                "version": "1.0.0-POC",
                "timestamp": "2025-01-15T10:00:00Z"
              }

---

# Configuration Global (global.xml)
# =================================

<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:context="http://www.springframework.org/schema/context"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd">

    <!-- Configuration des propriétés -->
    <context:property-placeholder location="mule-app.properties"/>

    <!-- Configuration HTTP Global -->
    <http:listener-config name="httpListenerConfig" 
                         host="${http.host}" 
                         port="${http.port}" 
                         doc:name="HTTP Listener config">
        <http:listener-connection>
            <http:listener-interceptors>
                <http:cors-interceptor allowOrigins="*" allowMethods="GET,POST,PUT,DELETE"/>
            </http:listener-connection>
        </http:listener-connection>
    </http:listener-config>

    <!-- Configuration HTTP Request Globaux -->
    <http:request-config name="paysAConfig" 
                        host="${systeme.pays.a.host}" 
                        port="${systeme.pays.a.port}" 
                        doc:name="Pays A HTTP Config">
        <http:request-connection>
            <http:request-authentication>
                <http:basic-authentication username="admin" password="admin"/>
            </http:request-authentication>
        </http:request-connection>
    </http:request-config>

    <http:request-config name="paysBConfig" 
                        host="${systeme.pays.b.host}" 
                        port="${systeme.pays.b.port}" 
                        doc:name="Pays B HTTP Config"/>

    <http:request-config name="commissionConfig" 
                        host="${commission.uemoa.host}" 
                        port="${commission.uemoa.port}" 
                        doc:name="Commission UEMOA HTTP Config"/>

    <!-- Configuration Base de Données -->
    <db:config name="dbConfig" doc:name="Database Config">
        <db:generic-connection driverClassName="${db.driver}"
                              url="${db.url}"
                              user="${db.user}"
                              password="${db.password}"/>
    </db:config>

    <!-- Configuration JMS pour messaging asynchrone -->
    <jms:config name="jmsConfig" doc:name="JMS Config">
        <jms:active-mq-connection>
            <jms:factory-configuration brokerUrl="vm://localhost"/>
        </jms:active-mq-connection>
    </jms:config>

</mule>

---

# Simulateurs de Systèmes Externes
# =================================

# Simulateur Système Pays A (Java Spring Boot)
# ---------------------------------------------

@RestController
@RequestMapping("/api/v1")
public class SystemePaysAController {

    @PostMapping("/mainlevee/autorisation")
    public ResponseEntity<Map<String, Object>> recevoirAutorisationMainlevee(
            @RequestBody Map<String, Object> autorisation) {
        
        System.out.println("=== PAYS A - Autorisation Mainlevée Reçue ===");
        System.out.println("Manifeste: " + autorisation.get("numeroManifeste"));
        System.out.println("Déclaration: " + autorisation.get("numeroDeclaration"));
        System.out.println("Montant: " + autorisation.get("montantAcquitte"));
        
        Map<String, Object> response = new HashMap<>();
        response.put("status", "ACCEPTED");
        response.put("message", "Mainlevée autorisée");
        response.put("numeroManifeste", autorisation.get("numeroManifeste"));
        response.put("dateTraitement", Instant.now().toString());
        
        return ResponseEntity.ok(response);
    }

    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> health() {
        Map<String, Object> health = new HashMap<>();
        health.put("service", "Système Douanier Pays A");
        health.put("status", "UP");
        health.put("timestamp", Instant.now().toString());
        return ResponseEntity.ok(health);
    }
}

# Simulateur Système Pays B (Java Spring Boot)
# ---------------------------------------------

@RestController
@RequestMapping("/api/v1")
public class SystemePaysBController {

    @Autowired
    private RestTemplate restTemplate;

    @PostMapping("/manifeste/reception")
    public ResponseEntity<Map<String, Object>> recevoirManifeste(
            @RequestBody Map<String, Object> manifeste) {
        
        System.out.println("=== PAYS B - Manifeste Reçu ===");
        System.out.println("Manifeste: " + manifeste);
        
        // Simulation traitement déclaration
        String numeroDeclaration = "DEC" + System.currentTimeMillis();
        double montantCalcule = 250000.0; // Simulation calcul droits et taxes
        
        // Simulation paiement après 5 secondes
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                simulerPaiement(manifeste, numeroDeclaration, montantCalcule);
            }
        }, 5000);
        
        Map<String, Object> response = new HashMap<>();
        response.put("status", "RECEIVED");
        response.put("message", "Manifeste reçu, déclaration en cours");
        response.put("numeroDeclaration", numeroDeclaration);
        
        return ResponseEntity.ok(response);
    }

    private void simulerPaiement(Map<String, Object> manifeste, 
                                String numeroDeclaration, double montant) {
        
        System.out.println("=== PAYS B - Simulation Paiement ===");
        
        Map<String, Object> paiement = new HashMap<>();
        paiement.put("numeroDeclaration", numeroDeclaration);
        paiement.put("manifesteOrigine", 
            ((Map<String, Object>) manifeste.get("manifeste")).get("numeroOrigine"));
        paiement.put("montantPaye", montant);
        paiement.put("referencePaiement", "PAY" + System.currentTimeMillis());
        paiement.put("datePaiement", Instant.now().toString());
        paiement.put("paysDeclarant", "BFA");
        
        try {
            // Envoi notification paiement vers Kit
            ResponseEntity<String> response = restTemplate.postForEntity(
                "http://localhost:8080/api/v1/paiement/notification",
                paiement,
                String.class
            );
            
            System.out.println("Paiement notifié: " + response.getBody());
            
        } catch (Exception e) {
            System.err.println("Erreur notification paiement: " + e.getMessage());
        }
    }
}

# Simulateur Commission UEMOA (Java Spring Boot)
# -----------------------------------------------

@RestController
@RequestMapping("/api/v1")
public class CommissionUEMOAController {

    private final List<Map<String, Object>> operations = new ArrayList<>();

    @PostMapping("/tracabilite/enregistrer")
    public ResponseEntity<Map<String, Object>> enregistrerOperation(
            @RequestBody Map<String, Object> operation) {
        
        System.out.println("=== COMMISSION UEMOA - Traçabilité ===");
        System.out.println("Type: " + operation.get("typeOperation"));
        System.out.println("Pays: " + operation.get("paysOrigine") + " → " + operation.get("paysDestination"));
        System.out.println("Données: " + operation.get("donneesMetier"));
        
        operation.put("id", operations.size() + 1);
        operation.put("dateEnregistrement", Instant.now().toString());
        operations.add(operation);
        
        Map<String, Object> response = new HashMap<>();
        response.put("status", "RECORDED");
        response.put("message", "Opération enregistrée");
        response.put("numeroOperation", operation.get("numeroOperation"));
        
        return ResponseEntity.ok(response);
    }

    @GetMapping("/statistiques")
    public ResponseEntity<Map<String, Object>> getStatistiques() {
        Map<String, Object> stats = new HashMap<>();
        stats.put("nombreOperations", operations.size());
        stats.put("dernierUpdate", Instant.now().toString());
        stats.put("operations", operations);
        
        return ResponseEntity.ok(stats);
    }
}