<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- ✅ WORKFLOW LIBRE PRATIQUE - 21 ÉTAPES -->
    
    <!-- ✅ ÉTAPES 4-5: Réception Manifeste depuis Sénégal (Pays A) -->
    <sub-flow name="receive-manifeste-from-senegal" doc:id="73ab0f78-4511-4eec-9892-1e721030e160">
        <set-variable value="#['KIT_SEN_' ++ now() as String {format: 'yyyyMMddHHmmss'} ++ '_' ++ (random() * 1000) as String {format: '000'}]" 
                      doc:name="Set Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set incoming" variableName="incoming"/>
        
        <logger level="INFO" message="📨 [Kit] ÉTAPES 4-5: Réception manifeste UEMOA depuis Sénégal (Port de Dakar): #[vars.incoming.numero_manif]" doc:name="Log Manifeste Reception" />
        
        <!-- ✅ Validation format UEMOA du Sénégal -->
        <choice doc:name="Validate UEMOA Format">
            <when expression="#[vars.incoming.format_type == 'UEMOA' or vars.incoming.numero_manif != null]">
                
                <!-- ✅ Stockage dans Supabase pour traçabilité -->
                <ee:transform doc:name="Transform UEMOA for Supabase" doc:id="49a309ab-4421-4cff-8b40-25ea57d4d2f4">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    // ✅ Conformité schéma Supabase
    numero_manifeste: vars.incoming.numero_manif as String,
    annee_manif: vars.incoming.annee_manif,
    bureau_manif: vars.incoming.bureau_manif,
    consignataire: vars.incoming.consignataire,
    transporteur: vars.incoming.consignataire,
    format_type: "UEMOA",
    
    // ✅ Informations navire
    navire: vars.incoming.navire,
    provenance: vars.incoming.provenance,
    pavillon: vars.incoming.pavillon,
    date_arrivee: vars.incoming.date_arrivee,
    valapprox: vars.incoming.valapprox,
    nbre_article: vars.incoming.nbre_article,
    
    // ✅ Pays selon workflow UEMOA
    pays_origine: "SEN",  // Sénégal
    pays_destination: (
        if (vars.incoming.articles[0].pays_dest contains "MALI") "MLI"
        else if (vars.incoming.articles[0].pays_dest contains "BURKINA") "BFA"
        else if (vars.incoming.articles[0].pays_dest contains "NIGER") "NER"
        else "MLI" // Mali par défaut pour ce workflow
    ),
    
    // ✅ Données complètes workflow étapes 4-5
    data_json: {
        format: "UEMOA",
        version: "2025.1",
        manifeste_complet: vars.incoming,
        etape_workflow: 5,
        pays_origine: "Sénégal",
        port_origine: "Port de Dakar",
        articles_destination: vars.incoming.articles map ((article, index) -> {
            article_numero: article.art,
            description: article.marchandise,
            destination: article.pays_dest,
            ville_destination: article.ville_dest,
            poids: article.poids,
            destinataire: article.destinataire
        }),
        correlationId: vars.correlationId,
        date_reception_kit: now(),
        source_system: "SENEGAL_PORT_DAKAR"
    },
    date_reception: now() as String { format: "yyyy-MM-dd'T'HH:mm:ssZ" },
    statut: "RECU_KIT_UEMOA"
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
                
                <!-- ✅ Stockage Supabase -->
                <http:request method="POST" doc:name="Store in Supabase" config-ref="supabaseRestConfig" 
                              path="${supabase.rest.base_path}${supabase.rest.endpoints.manifestes}">
				</http:request>
                
                <logger level="INFO" message="✅ [Kit] Manifeste stocké dans Supabase: #[vars.incoming.numero_manif]" doc:name="Log Storage Success" />
                
                <!-- ✅ ÉTAPE 5: Transmission vers Mali (Pays B) -->
                <flow-ref name="route-to-mali-bamako" doc:name="Route to Mali Bamako (Étape 5)" />
                
                <!-- ✅ Notification Commission UEMOA (Étape 20) -->
                <flow-ref name="notify-commission-manifeste" doc:name="Notify Commission Manifeste" />
                
            </when>
            <otherwise>
                <logger level="ERROR" message="❌ [Kit] Format manifeste invalide depuis Sénégal: #[payload]" doc:name="Log Invalid Format" />
                <set-variable value="#[400]" doc:name="Set Error Status" variableName="http.status" />
                <ee:transform doc:name="Error Response">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "ERROR",
    message: "Format manifeste UEMOA invalide depuis Sénégal",
    etape: "4-5_RECEPTION_MANIFESTE",
    pays_origine: "Sénégal",
    timestamp: now()
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </otherwise>
        </choice>
    </sub-flow>

    <!-- ✅ ÉTAPE 5: Routage vers Mali (Pays B de destination) -->
    <sub-flow name="route-to-mali-bamako" doc:id="5d284d24-75cc-4482-aff3-dbff520d94d2">
        <logger level="INFO" message="🚀 [Kit] ÉTAPE 5: Routage manifeste vers Mali (Bamako): #[vars.incoming.numero_manif]" doc:name="Log Mali Routing" />
        
        <!-- ✅ Extraction articles pour Mali uniquement -->
        <ee:transform doc:name="Extract for Mali" doc:id="37f2405e-a4fc-446b-87a2-5a2fcee09764">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
// ✅ CORRECTION: Filtrer articles destinés au Mali avec vérification null
var articlesDestinationMali = if (vars.incoming.articles != null) 
    (vars.incoming.articles filter ((article) -> 
        (article.pays_dest contains ("MALI")) or (article.ville_dest contains ("BAMAKO"))
    ))
else []
---
{
    // ✅ CORRECTION: Format UEMOA standard avec "manifeste" (pas "manifeste_origine")
    manifeste: {
        // Identification manifeste
        numero_origine: vars.incoming.numero_manif as String,
        annee_manifeste: vars.incoming.annee_manif,
        bureau_origine: vars.incoming.bureau_manif,
        
        // Transport
        consignataire: vars.incoming.consignataire,
        transporteur: vars.incoming.consignataire,
        navire: vars.incoming.navire,
        provenance: vars.incoming.provenance,
        pavillon: vars.incoming.pavillon default "NON_SPECIFIE",
        date_arrivee: vars.incoming.date_arrivee,
        
        // Informations workflow
        format: "UEMOA",
        pays_origine: "SEN",
        pays_destination: "MLI",
        port_origine: "Port de Dakar",
        port_destination: "Bamako",
        etape_workflow: 5,
        
        // Statistiques
        valapprox: vars.incoming.valapprox default 0,
        nbre_article: sizeOf(articlesDestinationMali)
    },
    
    // ✅ CORRECTION: Format UEMOA avec "articles" (pas "articles_mali") - jamais null
    articles: articlesDestinationMali map ((article, index) -> {
        // Informations article
        art: article.art,
        position: index + 1,
        numero_article: article.art,
        
        // Destination Mali
        pays_dest: "MALI",
        ville_dest: article.ville_dest default "BAMAKO",
        destinataire: article.destinataire,
        voie_dest: article.voie_dest,
        ordre: article.ordre default (index + 1),
        
        // Description marchandise
        marchandise: article.marchandise,
        description: article.marchandise,
        
        // Poids et dimensions
        poids: article.poids,
        poids_brut: article.poids,
        poids_net: article.poids,
        nbre_colis: article.nbre_colis default 1,
        nombre_colis: article.nbre_colis default 1,
        
        // Conditionnement
        marque: article.marque,
        mode_cond: article.mode_cond,
        
        // Expédition
        date_emb: article.date_emb,
        lieu_emb: article.lieu_emb,
        connaissement: article.connaissement,
        expediteur: article.expediteur,
        
        // Conteneurs
        conteneurs: article.conteneurs,
        nbre_conteneur: article.nbre_conteneur default 0,
        nombre_conteneurs: article.nbre_conteneur default 0
    })
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Envoi vers Mali (Pays B) -->
        <http:request method="POST" doc:name="Send to Mali Bamako" 
                      path="${systeme.paysB.endpoints.manifeste}" config-ref="paysBConfig">
            <http:headers><![CDATA[#[{
    "Content-Type": "application/json",
    "X-Source-Country": "SEN",
    "X-Source-System": "KIT_INTERCONNEXION_SENEGAL_MALI", 
    "X-Correlation-ID": vars.correlationId,
    "X-Manifeste-Format": "UEMOA",
    "X-Workflow-Step": "5_TRANSMISSION_TO_MALI"
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] ÉTAPE 5 TERMINÉE: Manifeste transmis vers Mali (Bamako)" doc:name="Log Mali Success" />
    </sub-flow>

    <!-- ✅ ÉTAPES 14-16: Réception Déclaration et Paiement depuis Mali -->
    <sub-flow name="receive-declaration-from-mali" doc:id="9290e4d2-4a81-4d5c-8611-3a6367093407">
        <set-variable value="#['DECL_MLI_' ++ now() as String {format: 'yyyyMMddHHmmss'} ++ '_' ++ (random() * 1000) as String {format: '000'}]" 
                      doc:name="Set Declaration Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set incoming" variableName="incoming" />
        
        <logger level="INFO" message="📋 [Kit] ÉTAPES 14-16: Réception déclaration et paiement depuis Mali: #[vars.incoming.numeroDeclaration]" doc:name="Log Declaration Reception" />
        
        <!-- ✅ Stockage déclaration Mali dans Supabase -->
        <ee:transform doc:name="Transform Declaration for Supabase" doc:id="0e4b94a3-0a70-4a16-9560-44e4b745c47a">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    numero_declaration: vars.incoming.numeroDeclaration,
    manifeste_origine: vars.incoming.manifesteOrigine as String,
    pays_declarant: "MLI", // Mali
    pays_origine_manifeste: "SEN", // Sénégal
    
    // ✅ Informations déclaration (étapes 8-13)
    annee_declaration: vars.incoming.anneeDecl default "2025",
    bureau_declaration: vars.incoming.bureauDecl default "10S_BAMAKO",
    date_declaration: vars.incoming.dateDecl default now(),
    
    // ✅ Informations paiement (étape 14)
    montant_paye: vars.incoming.montantPaye,
    reference_paiement: vars.incoming.referencePaiement,
    date_paiement: vars.incoming.datePaiement,
    mode_paiement: vars.incoming.modePaiement default "ELECTRONIQUE_BCEAO",
    
    // ✅ Données complètes pour étapes 14-16
    data_json: {
        declaration_complete: vars.incoming,
        etape_workflow: 16,
        workflow_type: "LIBRE_PRATIQUE",
        pays_declarant: "Mali",
        ville_declarant: "Bamako",
        prochaine_etape: "17_TRANSMISSION_TO_SENEGAL"
    },
    
    date_reception: now(),
    statut: "DECLARATION_PAIEMENT_MALI"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Stockage dans Supabase -->
        <http:request method="POST" doc:name="Store Declaration in Supabase" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.declarations}">
		</http:request>
        
        <logger level="INFO" message="✅ [Kit] Déclaration Mali stockée dans Supabase: #[vars.incoming.numeroDeclaration]" doc:name="Log Declaration Stored" />
        
        <!-- ✅ ÉTAPE 17: Transmission autorisation vers Sénégal -->
        <flow-ref name="authorize-release-to-senegal" doc:name="Send Authorization to Senegal (Étape 17)" />
        
        <!-- ✅ Notification Commission (Étape 21) -->
        <flow-ref name="notify-commission-declaration" doc:name="Notify Commission Declaration" />
    </sub-flow>

    <!-- ✅ ÉTAPE 17: Autorisation Mainlevée vers Sénégal (Pays A) -->
    <sub-flow name="authorize-release-to-senegal" doc:id="fcc4889d-6138-426a-9a9a-ca7512bfac30">
        <logger level="INFO" message="🔓 [Kit] ÉTAPE 17: Autorisation mainlevée vers Sénégal (Port de Dakar): #[vars.incoming.manifesteOrigine]" doc:name="Log Release Authorization" />
        
        <ee:transform doc:name="Transform Authorization for Senegal" doc:id="796972b6-b157-4993-bce8-6bc27fe5ccd4">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    // ✅ Format attendu par Sénégal (api/mainlevee/autorisation.js)
    autorisationMainlevee: {
        format: "UEMOA",
        numeroManifeste: vars.incoming.manifesteOrigine,
        referenceDeclaration: vars.incoming.numeroDeclaration,
        
        // ✅ Informations paiement Mali (étape 14-16)
        montantAcquitte: vars.incoming.montantPaye,
        monnaie: "FCFA",
        paysDeclarant: "MLI",  // Mali
        referencePaiement: vars.incoming.referencePaiement,
        datePaiement: vars.incoming.datePaiement,
        dateRecouvrement: vars.incoming.datePaiement,
        
        // ✅ Autorisation Kit vers Sénégal
        dateAutorisation: now(),
        referenceAutorisation: "AUTH-KIT-MLI-SEN-" ++ vars.incoming.numeroDeclaration ++ "-" ++ (now() as String {format: "yyyyMMddHHmmss"}),
        statut: "AUTORISE_MAINLEVEE",
        
        // ✅ Métadonnées workflow étape 17
        etape_workflow: 17,
        typeAutorisation: "MAINLEVEE_INTER_PAYS_UEMOA",
        sourceKit: "KIT_INTERCONNEXION_MALI_SENEGAL",
        conformiteUEMOA: true,
        workflow_type: "LIBRE_PRATIQUE",
        
        // ✅ Traçabilité complète
        pays_origine_manifeste: "Sénégal",
        port_origine: "Port de Dakar",
        pays_declarant: "Mali",
        ville_declarant: "Bamako"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Envoi vers Sénégal (Port de Dakar) -->
        <http:request method="POST" doc:name="Send Authorization to Senegal" 
                      path="${systeme.paysA.endpoints.mainlevee}" config-ref="paysAConfig">
            <http:headers><![CDATA[#[{
    "X-Correlation-ID": vars.correlationId,
    "Content-Type": "application/json",
    "X-Authorization-Source": "KIT_INTERCONNEXION_MALI",
    "X-Source-Country": "MLI",
    "X-Payment-Reference": vars.incoming.referencePaiement,
    "X-Workflow-Step": "17_AUTHORIZATION_TO_SENEGAL"
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] ÉTAPE 17 TERMINÉE: Autorisation transmise vers Sénégal (Port de Dakar)" doc:name="Log Senegal Success" />
    </sub-flow>

    <!-- ✅ WORKFLOW TRANSIT - 16 ÉTAPES -->
    
    <!-- ✅ ÉTAPES 1-6: Création Déclaration Transit depuis Sénégal -->
    <sub-flow name="receive-transit-from-senegal" doc:id="9a145cad-bad8-4b02-8775-d57b288f1c45">
        <set-variable value="#['TRANSIT_SEN_' ++ now() as String {format: 'yyyyMMddHHmmss'}]" 
                      doc:name="Set Transit Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set incoming transit" variableName="incoming"/>
        
        <logger level="INFO" message="🚛 [Kit] ÉTAPES 1-6: Réception déclaration transit depuis Sénégal: #[vars.incoming.numeroDeclaration]" doc:name="Log Transit Creation" />
        
        <!-- ✅ Stockage déclaration transit dans Supabase -->
        <ee:transform doc:name="Transform Transit for Supabase" doc:id="fa7659e7-6e97-42b6-9a08-e93bb15802ad">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
fun normaliserCodePays(pays) = 
    if (pays == null or pays == "") "MLI"
    else if (pays == "MALI") "MLI"
    else if (pays == "SÉNÉGAL" or pays == "SENEGAL") "SEN"
    else if (pays == "BURKINA FASO" or pays == "BURKINA") "BFA"
    else if (pays == "NIGER") "NER"
    else if (pays == "CÔTE D'IVOIRE" or pays == "COTE D'IVOIRE") "CIV"
    else if (pays == "TOGO") "TGO"
    else if (pays == "BÉNIN" or pays == "BENIN") "BEN"
    else if (pays == "GUINÉE-BISSAU") "GNB"
    else if (sizeOf(pays) > 3) upper(pays[0 to 2])
    else upper(pays)
---
{
    numero_declaration: vars.incoming.numeroDeclaration,
    annee_declaration: vars.incoming.anneeDeclaration default (now() as String {format: "yyyy"}),
    
    // Bureaux
    bureau_depart: vars.incoming.bureauDepart default "18N_DAKAR",
    bureau_destination: vars.incoming.bureauDestination,
    
    // ✅ CORRECTION: Normalisation codes pays sur 3 caractères
    pays_depart: normaliserCodePays(vars.incoming.paysDepart default "SEN"),
    pays_destination: normaliserCodePays(vars.incoming.paysDestination default "MLI"),
    
    // Transport
    transporteur: vars.incoming.transporteur,
    mode_transport: vars.incoming.modeTransport default "ROUTIER",
    itineraire: vars.incoming.itineraire,
    delai_route: vars.incoming.delaiRoute,
    
    // Garanties et cautions (étape 6)
    caution_requise: vars.incoming.cautionRequise default 0,
    reference_caution: vars.incoming.referenceCaution,
    type_garantie: vars.incoming.typeGarantie default "CAUTION",
    
    // Workflow
    etape_workflow: 6,
    workflow_type: "TRANSIT",
    statut: "CREE",
    
    // ✅ Données complètes transit
    data_json: {
        declaration_complete: vars.incoming,
        etape_workflow: 6,
        workflow_type: "TRANSIT",
        pays_depart: "Sénégal",
        port_depart: "Port de Dakar",
        prochaine_etape: "10_DEBUT_OPERATION_TRANSIT",
        marchandises: vars.incoming.marchandises default []
    },
    
    // Dates - format ISO 8601 standard
    date_creation: vars.incoming.dateCreation default now(),
    date_reception: now(),
    date_modification: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Stockage dans Supabase -->
        <http:request method="POST" doc:name="Store Transit in Supabase" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.declarations_transit}">
		</http:request>
        
        <logger level="INFO" message="✅ [Kit] Transit Sénégal stocké: #[vars.incoming.numeroDeclaration]" doc:name="Log Transit Stored" />
        
        <!-- ✅ ÉTAPES 10-11: Transmission copie vers Mali -->
        <flow-ref name="send-transit-copy-to-mali" doc:name="Send Transit Copy to Mali (Étapes 10-11)" />
        
        <!-- ✅ Réponse création transit réussie -->
        <ee:transform doc:name="Transit Creation Success Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "SUCCESS",
    message: "Déclaration transit créée avec succès - Étapes 1-6 terminées",
    numeroDeclaration: vars.incoming.numeroDeclaration,
    etapes_completees: "1-6",
    prochaine_etape: "10-11_TRANSMISSION_COPIE_MALI",
    workflow_type: "TRANSIT",
    pays_depart: "Sénégal",
    pays_destination: vars.incoming.paysDestination default "Mali",
    timestamp: now()
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ✅ ÉTAPES 10-11: Envoi Copie Transit vers Mali -->
    <sub-flow name="send-transit-copy-to-mali" doc:id="b896ae8a-230e-49da-ae03-b1eb9674737a">
        <logger level="INFO" message="📄 [Kit] ÉTAPES 10-11: Envoi copie transit vers Mali: #[vars.incoming.numeroDeclaration]" doc:name="Log Transit Copy" />
        
        <!-- ✅ Préparation copie pour Mali -->
        <ee:transform doc:name="Prepare Transit Copy for Mali">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    // ✅ Copie déclaration transit pour Mali (étape 11)
    transit_original: {
        numero_declaration: vars.incoming.numeroDeclaration,
        pays_depart: "SEN",
        bureau_depart: vars.incoming.bureauDepart default "18N_DAKAR",
        date_creation: vars.incoming.dateCreation default now(),
        transporteur: vars.incoming.transporteur,
        itineraire: vars.incoming.itineraire,
        delai_route: vars.incoming.delaiRoute
    },
    
    // ✅ Marchandises en transit
    marchandises: vars.incoming.marchandises default [],
    
    // ✅ Instructions pour Mali (étapes 13-14)
    instructions_mali: {
        attendre_arrivee: true,
        delai_maximum: vars.incoming.delaiRoute,
        controles_passage: vars.incoming.controlesPassage default false,
        message_arrivee_requis: true  // Étape 14
    },
    
    metadata: {
        correlation_id: vars.correlationId,
        etape_actuelle: 11,
        prochaine_etape: "13-14_ARRIVEE_MALI",
        workflow_type: "TRANSIT"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Envoi vers Mali -->
        <http:request method="POST" doc:name="Send Transit Copy to Mali" 
                      path="/api/transit/copie" config-ref="paysBConfig">
            <http:headers><![CDATA[#[{
    "Content-Type": "application/json",
    "X-Source-Country": "SEN",
    "X-Source-System": "KIT_TRANSIT_SENEGAL_MALI",
    "X-Correlation-ID": vars.correlationId,
    "X-Workflow-Step": "11_TRANSIT_COPY_TO_MALI"
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] ÉTAPES 10-11 TERMINÉES: Copie transit transmise vers Mali" doc:name="Log Mali Transit Success" />
    </sub-flow>

    <!-- ✅ ÉTAPE 14: Réception Message Arrivée depuis Mali -->
    <sub-flow name="receive-arrival-message-from-mali" doc:id="fea6a5b5-185e-44a7-bf8d-68aa0d2886c0">
        <set-variable value="#['ARRIVAL_MLI_' ++ now() as String {format: 'yyyyMMddHHmmss'}]" 
                      doc:name="Set Arrival Correlation ID" variableName="correlationId"/>
        
        <set-variable value="#[payload]" doc:name="Set arrival message" variableName="incoming"/>
        
        <logger level="INFO" message="📥 [Kit] ÉTAPE 14: Réception message arrivée depuis Mali: #[vars.incoming.numeroDeclaration]" doc:name="Log Arrival Message" />
        
        <!-- ✅ Stockage message arrivée dans Supabase -->
        <ee:transform doc:name="Transform Arrival for Supabase">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    numero_declaration: vars.incoming.numeroDeclaration,
    pays_destination: "MLI",  // Mali
    bureau_arrivee: vars.incoming.bureauArrivee default "10S_BAMAKO",
    date_arrivee: vars.incoming.dateArrivee default now(),
    
    // ✅ Informations arrivée (étape 14)
    controle_effectue: vars.incoming.controleEffectue default true,
    visa_appose: vars.incoming.visaAppose default true,
    conformite_itineraire: vars.incoming.conformiteItineraire default true,
    delai_respecte: vars.incoming.delaiRespecte default true,
    
    // ✅ Déclaration en détail (étape 15)
    declaration_detail_deposee: vars.incoming.declarationDetailDeposee default false,
    numero_declaration_detail: vars.incoming.numeroDeclarationDetail,
    
    data_json: {
        message_complet: vars.incoming,
        etape_workflow: 14,
        workflow_type: "TRANSIT",
        prochaine_etape: "16_TRANSMISSION_RETOUR_SENEGAL"
    },
    
    date_reception: now(),
    statut: "ARRIVEE_CONFIRMEE_MALI"
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Stockage dans Supabase -->
        <http:request method="POST" doc:name="Store Arrival Message" config-ref="supabaseRestConfig" 
                      path="${supabase.rest.base_path}${supabase.rest.endpoints.messages_arrivee}">
		</http:request>
        
        <logger level="INFO" message="✅ [Kit] Message arrivée Mali stocké: #[vars.incoming.numeroDeclaration]" doc:name="Log Arrival Stored" />
        
        <!-- ✅ ÉTAPE 16: Transmission retour vers Sénégal -->
        <flow-ref name="send-arrival-confirmation-to-senegal" doc:name="Send Arrival Confirmation to Senegal (Étape 16)" />
    </sub-flow>

    <!-- ✅ ÉTAPE 16: Confirmation Arrivée vers Sénégal -->
    <sub-flow name="send-arrival-confirmation-to-senegal" doc:id="88b370a5-f465-4516-87e6-f665ddb884ba">
        <logger level="INFO" message="📤 [Kit] ÉTAPE 16: Confirmation arrivée vers Sénégal: #[vars.incoming.numeroDeclaration]" doc:name="Log Confirmation to Senegal" />
        
        <!-- ✅ Préparation confirmation pour Sénégal -->
        <ee:transform doc:name="Prepare Confirmation for Senegal">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    // ✅ CORRECTION: Utiliser camelCase pour cohérence avec le reste du code
    messageArrivee: {
        numeroDeclaration: vars.incoming.numeroDeclaration,
        paysDestination: "Mali",
        bureauArrivee: vars.incoming.bureauArrivee default "10S_BAMAKO",
        dateArrivee: vars.incoming.dateArrivee default now(),
        
        // ✅ Résultats contrôles Mali
        controleEffectue: vars.incoming.controleEffectue default true,
        visaAppose: vars.incoming.visaAppose default true,
        conformiteItineraire: vars.incoming.conformiteItineraire default true,
        delaiRespecte: vars.incoming.delaiRespecte default true,
        
        // ✅ Informations pour apurement Sénégal (étapes 17-18)
        declarationDetailDeposee: vars.incoming.declarationDetailDeposee default false,
        numeroDeclarationDetail: vars.incoming.numeroDeclarationDetail,
        transitTermine: true,
        
        // ✅ Métadonnées workflow
        etapeWorkflow: 16,
        typeMessage: "CONFIRMATION_ARRIVEE_TRANSIT",
        demandeApurement: true,
        libererGaranties: true
    },
    
    metadata: {
        correlationId: vars.correlationId,
        sourcePays: "Mali",
        destinationPays: "Sénégal",
        workflowType: "TRANSIT"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <!-- ✅ Envoi vers Sénégal pour apurement transit -->
        <http:request method="POST" doc:name="Send Confirmation to Senegal" 
                      path="/api/transit/arrivee" config-ref="paysAConfig">
            <http:headers><![CDATA[#[{
    "Content-Type": "application/json",
    "X-Source-Country": "MLI",
    "X-Source-System": "KIT_TRANSIT_MALI_SENEGAL",
    "X-Correlation-ID": vars.correlationId,
    "X-Workflow-Step": "16_ARRIVAL_CONFIRMATION_TO_SENEGAL"
}]]]></http:headers>
        </http:request>
        
        <logger level="INFO" message="✅ [Kit] ÉTAPE 16 TERMINÉE: Confirmation arrivée transmise vers Sénégal" doc:name="Log Senegal Confirmation Success" />
    </sub-flow>

    <!-- ✅ NOTIFICATIONS COMMISSION UEMOA -->

    <!-- ✅ Notification Commission - Manifeste (Étape 20) -->
    <sub-flow name="notify-commission-manifeste" doc:id="f42d7573-d340-45d4-8d74-04726a99dce9">
        <async doc:name="Async Commission Manifeste Notification">
            <logger level="INFO" message="📊 [Kit] Notification Commission UEMOA - Manifeste: #[vars.incoming.numero_manif]" doc:name="Log Commission Manifeste" />
            
            <ee:transform doc:name="Transform for Commission Manifeste">
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
output application/json
// ✅ Fonction normalisation codes pays
fun normaliserCodesPays(pays) = 
    if (pays == "SÉNÉGAL" or pays == "SENEGAL") "SEN"
    else if (pays == "MALI") "MLI"
    else if (pays == "BURKINA FASO" or pays == "BURKINA") "BFA"
    else if (pays == "NIGER") "NER"
    else if (pays == "CÔTE D'IVOIRE" or pays == "COTE D'IVOIRE") "CIV"
    else if (pays == "TOGO") "TGO"
    else if (pays == "BÉNIN" or pays == "BENIN") "BEN"
    else if (pays == "GUINÉE-BISSAU") "GNB"
    else pays
---
{
    typeOperation: "TRANSMISSION_MANIFESTE_LIBRE_PRATIQUE",
    numeroOperation: vars.incoming.numero_manif ++ "-" ++ vars.incoming.annee_manif ++ "-" ++ now() as String {format: "yyyyMMddHHmmss"},
    format: "UEMOA",
    
    // ✅ Pays normalisés
    paysOrigine: "SEN",  // Sénégal
    paysDestination: normaliserCodesPays(vars.incoming.articles[0].pays_dest default "MLI"),
    
    // ✅ Données métier Commission
    donneesMetier: {
        numero_manifeste: vars.incoming.numero_manif,
        annee_manifeste: vars.incoming.annee_manif,
        consignataire: vars.incoming.consignataire,
        navire: vars.incoming.navire,
        provenance: vars.incoming.provenance,
        port_debarquement: "Port de Dakar",
        
        // ✅ Statistiques
        nombre_articles: vars.incoming.nbre_article,
        poids_total: sum(vars.incoming.articles.poids),
        nombre_conteneurs: sum(vars.incoming.articles.nbre_conteneur),
        valeur_approximative: vars.incoming.valapprox,
        
        // ✅ Destinations
        pays_destinations: vars.incoming.articles.pays_dest distinctBy $ map normaliserCodesPays($),
        villes_destinations: vars.incoming.articles.ville_dest distinctBy $
    },
    
    horodatage: now(),
    source: "KIT_INTERCONNEXION_UEMOA",
    version_format: "UEMOA_2025.1",
    etape_workflow: 20
}]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            
            <!-- ✅ Envoi vers Commission UEMOA -->
            <http:request method="POST" doc:name="Send Manifeste to Commission" 
                          path="${commission.uemoa.endpoints.manifeste}" config-ref="commissionConfig">
                <http:headers><![CDATA[#[{
    "Authorization": "Bearer ${commission.uemoa.auth.token}",
    "Content-Type": "application/json",
    "X-Source-System": "KIT_INTERCONNEXION_UEMOA",
    "X-Correlation-ID": vars.correlationId,
    "X-Workflow-Step": "20_COMMISSION_MANIFESTE"
}]]]></http:headers>
            </http:request>
            
            <logger level="INFO" message="✅ [Kit] Commission UEMOA notifiée - Manifeste" doc:name="Log Commission Manifeste Success" />
        </async>
    </sub-flow>

    <!-- ✅ Notification Commission - Déclaration (Étape 21) -->
    <sub-flow name="notify-commission-declaration" doc:id="b5473ba7-3979-4c81-ba42-eaddf71434f2">
        <async doc:name="Async Commission Declaration Notification">
            <logger level="INFO" message="📊 [Kit] Notification Commission UEMOA - Déclaration: #[vars.incoming.numeroDeclaration]" doc:name="Log Commission Declaration" />
            
            <ee:transform doc:name="Transform for Commission Declaration">
                <ee:message>
                    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    typeOperation: "COMPLETION_LIBRE_PRATIQUE",
    numeroOperation: vars.incoming.numeroDeclaration ++ "-FINAL-" ++ now() as String {format: "yyyyMMddHHmmss"},
    format: "WORKFLOW_COMPLETE",
    
    paysOrigine: "SEN",  // Sénégal
    paysDestination: "MLI",  // Mali
    
    // ✅ CORRECTION: Données finales workflow plus complètes
    donneesMetier: {
        // Informations déclaration
        numero_declaration: vars.incoming.numeroDeclaration,
        manifeste_origine: vars.incoming.manifesteOrigine,
        bureau_declaration: vars.incoming.bureauDecl default "10S_BAMAKO",
        annee_declaration: vars.incoming.anneeDecl default "2025",
        date_declaration: vars.incoming.dateDecl default now(),
        
        // Informations paiement (étape 14-16)
        montant_paye: vars.incoming.montantPaye,
        reference_paiement: vars.incoming.referencePaiement,
        date_paiement: vars.incoming.datePaiement default now(),
        mode_paiement: vars.incoming.modePaiement default "ELECTRONIQUE_BCEAO",
        
        // Informations commerciales (si disponibles)
        nombre_articles: vars.incoming.nombreArticles default 1,
        valeur_totale_caf: vars.incoming.montantPaye,
        liquidation_totale: vars.incoming.montantPaye,
        
        // ✅ Workflow complet
        etapes_completees: "1-21",
        workflow_type: "LIBRE_PRATIQUE",
        statut_final: "TERMINE_SUCCES",
        
        // Traçabilité géographique
        pays_origine: "Sénégal",
        port_origine: "Port de Dakar", 
        pays_destination: "Mali",
        ville_destination: "Bamako",
        bureau_destination: vars.incoming.bureauDecl default "10S_BAMAKO"
    },
    
    horodatage: now(),
    source: "KIT_INTERCONNEXION_FINAL",
    version_format: "WORKFLOW_2025.1",
    etape_workflow: 21
}]]></ee:set-payload>
                </ee:message>
            </ee:transform>
            
            <!-- ✅ Envoi vers Commission UEMOA -->
            <http:request method="POST" doc:name="Send Final to Commission" 
                          path="${commission.uemoa.endpoints.declaration}" config-ref="commissionConfig">
                <http:headers><![CDATA[#[{
    "Authorization": "Bearer ${commission.uemoa.auth.token}",
    "Content-Type": "application/json",
    "X-Source-System": "KIT_INTERCONNEXION_FINAL",
    "X-Correlation-ID": vars.correlationId,
    "X-Workflow-Step": "21_COMMISSION_FINAL"
}]]]></http:headers>
            </http:request>
            
            <logger level="INFO" message="✅ [Kit] Commission UEMOA notifiée - Workflow terminé" doc:name="Log Commission Final Success" />
        </async>
    </sub-flow>

    <!-- ✅ HEALTH CHECK Kit d'Interconnexion -->
    <sub-flow name="health-check" doc:id="004e345d-8b0d-4830-b452-3bcf4921ce6c">
        <!-- ✅ Tests connectivité systèmes -->
        <try doc:name="Test Systems Connectivity">
            <!-- Test Sénégal -->
            <!-- [STUDIO:"Test Senegal"]<http:request method="GET" doc:name="Test Senegal" config-ref="paysAConfig" 
                          path="${systeme.paysA.endpoints.health}"/> [STUDIO] -->
            <set-variable value="UP" doc:name="Senegal UP" variableName="senegalStatus" />
            
            <!-- Test Mali -->
            <!-- [STUDIO:"Test Mali"]<http:request method="GET" doc:name="Test Mali" config-ref="paysBConfig" 
                          path="/api/health"/> [STUDIO] -->
            <set-variable value="UP" doc:name="Mali UP" variableName="maliStatus" />
            
            <!-- Test Commission -->
            <!-- [STUDIO:"Test Commission"]<http:request method="GET" doc:name="Test Commission" config-ref="commissionConfig" 
                          path="${commission.uemoa.endpoints.health}"/> [STUDIO] -->
            <set-variable value="UP" doc:name="Commission UP" variableName="commissionStatus" />
            
            <!-- Test Supabase -->
            <http:request method="GET" doc:name="Test Supabase" config-ref="supabaseRestConfig" 
                          path="${supabase.rest.base_path}${supabase.rest.endpoints.configurations}?limit=1">
			</http:request>
            <set-variable value="UP" doc:name="Supabase UP" variableName="supabaseStatus" />
            
            <error-handler>
                <on-error-continue>
                    <set-variable value="DOWN" doc:name="Set DOWN Status" variableName="currentSystemStatus" />
                </on-error-continue>
            </error-handler>
        </try>

        <!-- ✅ Réponse Health Check complète -->
        <ee:transform doc:name="Health Status Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    service: "Kit d'Interconnexion UEMOA",
    status: "UP",
    version: "1.0.0-UEMOA",
    format_support: "UEMOA_2025.1",
    timestamp: now(),
    
    // ✅ Workflow supportés
    workflows: {
        libre_pratique: {
            enabled: true,
            etapes: "21 étapes",
            description: "Sénégal (1-5, 17-19) ↔ Mali (6-16) ↔ Commission (20-21)"
        },
        transit: {
            enabled: true,
            etapes: "16 étapes", 
            description: "Sénégal (1-6, 17-18) ↔ Mali (13-14) ↔ Kit (10-11, 16)"
        }
    },
    
    // ✅ Connectivité systèmes
    systemes_externes: {
        senegal: {
            nom: "Sénégal - Port de Dakar",
            role: "Pays de prime abord",
            status: vars.senegalStatus default "DOWN",
            url: Mule::p('systeme.paysA.url'),
            endpoints_actifs: [
                "/api/manifeste/creer",
                "/api/mainlevee/autorisation", 
                "/api/apurement/traiter"
            ]
        },
        mali: {
            nom: "Mali - Bamako",
            role: "Pays de destination",
            status: vars.maliStatus default "DOWN",
            url: Mule::p('systeme.paysB.url'),
            endpoints_actifs: [
                "/api/manifeste/reception",
                "/api/declaration/soumission",
                "/api/paiement/notification"
            ]
        },
        commission: {
            nom: "Commission UEMOA",
            role: "Traçabilité centralisée",
            status: vars.commissionStatus default "DOWN",
            url: Mule::p('commission.uemoa.url'),
            endpoints_actifs: [
                "/api/tracabilite/manifeste",
                "/api/tracabilite/declaration"
            ]
        },
        supabase: {
            nom: "Base de données Kit",
            role: "Stockage intermédiaire",
            status: vars.supabaseStatus default "DOWN",
            host: Mule::p('supabase.host')
        }
    },
    
    // ✅ Endpoints Kit d'Interconnexion
    endpoints: {
        manifesteTransmission: "/api/v1/manifeste/transmission",      // Étapes 4-5
        declarationReception: "/api/v1/declaration/soumission",       // Étapes 14-16
        transitCreation: "/api/v1/transit/creation",                  // Étapes 1-6
        transitArrivee: "/api/v1/transit/arrivee",                   // Étape 14
        healthCheck: "/api/v1/health",
        console: "/console"
    },
    
    configuration: {
        timeout_connection: Mule::p('external.timeout.connection') ++ "ms",
        retry_attempts: Mule::p('retry.attempts'),
        cors_enabled: Mule::p('cors.enabled'),
        batch_apurement_enabled: true
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
		<logger level="INFO" message="🏥 [Kit] Health check terminé - Systèmes: SEN(#[vars.senegalStatus default 'DOWN']) MLI(#[vars.maliStatus default 'DOWN']) COM(#[vars.commissionStatus default 'DOWN'])" doc:name="Log Health Complete" />
    </sub-flow>

</mule>